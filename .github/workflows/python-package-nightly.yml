name: Publish to PyPI.org
on:
  schedule:
    cron: '40 * * * *'
    branches: [ "master" ]
jobs:
  bump-version:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
      with:
        # Setup GitHub user token to the secrets in the repository
        token: ${{ secrets.AC_GITHUB_TOKEN }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup Git
      run: |
        git config user.name "Hazedd"
        git config user.email 'Hazedd@users.noreply.github.com'
        git remote set-url origin https://x-access-token:${{ secrets.AC_GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
        git checkout "${GITHUB_REF:11}"

##    - name: Setup env variables
##      run: |
##        echo "SKIPBUMP=FALSE" >> $GITHUB_ENV
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install bump2version setuptools wheel twine
#    # If a commit starts with [MAJOR] a new major verion upgrade will be
#    # triggered. Use with caution as Major upgrades denote backwards
#    # incompatibility. Yet I like it to be integrated in the CI
#    - name: Bump Major Version
#      env:
#        COMMIT_MSG: ${{ github.event.head_commit.message }}
#      run: |
#        bump2version minor
#        echo "SKIPBUMP=TRUE" >> $GITHUB_ENV
#      if: "startsWith(github.event.head_commit.message, '[MAJOR]')"
#
#    - name: Bump Minor Version
#      env:
#        COMMIT_MSG: ${{ github.event.head_commit.message }}
#      run: |
#        bump2version minor
#        echo "SKIPBUMP=TRUE" >> $GITHUB_ENV
#      if: "startsWith(github.event.head_commit.message, '[FEATURE]')"
#
#    # Default action
#    - name: Bump Patch Version
#      env:
#        COMMIT_MSG: ${{ github.event.head_commit.message }}
#      run: |
#        bump2version patch
#      if: env.SKIPBUMP == 'FALSE'
#
#    - name: Commit version change to master
#      run: |
#        git push --follow-tags
#    - name: Build and publish
#      env:
#        TWINE_USERNAME: ${{ secrets.PYPI_USER }}
#        TWINE_PASSWORD: ${{ secrets.PYPI_PASS }}
#      run: |
#        python setup.py sdist bdist_wheel
#        # note that here testpypi is used instead of the main pypi
#        # because this is a test project
#        # read more at: https://packaging.python.org/tutorials/packaging-projects/
#        twine upload --repository testpypi dist/*